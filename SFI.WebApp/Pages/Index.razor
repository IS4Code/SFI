@page "/"
@using IS4.SFI;
@using System.IO;
@using System.Text.RegularExpressions;
@using Microsoft.VisualBasic.FileIO;
@inject NavigationManager navManager
@inject IJSRuntime js

<h1>Semantic File Inspector</h1>
<p><strong><a href="https://github.com/IS4Code/SFI">GitHub</a> | <a href="https://github.com/IS4Code/SFI/wiki">Documentation</a> | <a href="https://github.com/IS4Code/SFI/releases">Download</a></strong></p>

<p><textarea @bind="Command" style="resize: both;" rows="4" cols="80" /></p>
<form @onsubmit="OnSubmit" @onreset="OnReset">
    <p>Input files: @foreach(int i in Enumerable.Range(0, inputFilesCount))
    {
        <InputFile OnChange="@(args => OnFileChange(i, args, inputFilesGroups, inputFiles))" multiple /><text>&#32;</text>
    }</p>
    <p>Plugins: @foreach(int i in Enumerable.Range(0, pluginFilesCount))
    {
        <InputFile OnChange="@(args => OnFileChange(i, args, pluginFilesGroups, PluginFiles))" multiple /><text>&#32;</text>
    }</p>
    <p><button type="submit">Execute</button> <button type="button" @onclick="OnStop">Stop</button> <button type="reset">Reset</button></p>
</form>

<ul>
    @foreach(var file in outputFiles)
    {
        <li><a href="@file.Value.CreateBlob()" download="@file.Key">@file.Key</a></li>
    }
</ul>

<pre>
    @foreach(var chunk in outputChunks)
    {
<span>@chunk</span>
    }
</pre>

@code {
    SortedDictionary<int, IReadOnlyList<IBrowserFile>> inputFilesGroups = new();
    SortedDictionary<int, IReadOnlyList<IBrowserFile>> pluginFilesGroups = new();

    int inputFilesCount => inputFilesGroups.Count + 1;
    int pluginFilesCount => pluginFilesGroups.Count + 1;

    Dictionary<string, IBrowserFile> inputFiles = new();
    public static Dictionary<string, IBrowserFile> PluginFiles { get; private set; } = new();

    Dictionary<string, BlobArrayStream> outputFiles = new();
    const string initialCommand = "describe -r urn:uuid: -d -x *-hash:* -h xxh64 * output.ttl";

    const string fragmentCommandPrefix = "#!";

    string? _command;
    string Command{
        get{
            return _command ??= (GetCommandFromFragment(navManager.Uri) ?? initialCommand);
        }
        set{
            _command = value;
        }
    }
    List<string> outputChunks = new List<string>();
    WebEnvironment? webEnvironment;

    string? GetCommandFromFragment(string uri)
    {
        var fragIndex = uri.IndexOf(fragmentCommandPrefix);
        if(fragIndex == -1)
        {
            return null;
        }
        var frag = uri.Substring(fragIndex + fragmentCommandPrefix.Length);
        return Uri.UnescapeDataString(frag);
    }

    void OnFileChange(int index, InputFileChangeEventArgs e, SortedDictionary<int, IReadOnlyList<IBrowserFile>> groups, Dictionary<string, IBrowserFile> byName)
    {
        groups[index] = e.GetMultipleFiles();

        byName.Clear();
        foreach(var file in groups.Values.SelectMany(g => g))
        {
            byName[file.Name] = file;
        }
    }

    static readonly Regex lineWhitespace = new Regex(@"^\s+|\s+$", RegexOptions.Multiline | RegexOptions.Compiled);

    protected override async Task OnInitializedAsync()
    {
        await RunCommand("-?");
    }

    async void OnSubmit()
    {
        var cmd = lineWhitespace.Replace(Command, "");
        navManager.NavigateTo(fragmentCommandPrefix + UriTools.EscapeFragmentString(cmd), forceLoad: false, replace: true);
        await RunCommand(cmd);
    }

    void OnStop()
    {
        webEnvironment?.Dispose();
    }

    async Task OnReset()
    {
        Command = initialCommand;
        inputFilesGroups.Clear();
        inputFiles.Clear();
        pluginFilesGroups.Clear();
        PluginFiles.Clear();
        await RunCommand("-?");
    }

    async Task RunCommand(string command)
    {
        var output = outputChunks = new List<string>();
        var logWriter = new EventWriter();
        logWriter.Written += sb => {
            output.Add(sb.ToString());
        };
        outputFiles = new Dictionary<string, BlobArrayStream>();

        webEnvironment?.Dispose();

        try{
            var invocations = new List<string[]>();
            using(var parser = new TextFieldParser(new StringReader(command))
            {
                TextFieldType = FieldType.Delimited,
                CommentTokens = new[] { "#" },
                Delimiters = new[] { " " },
                HasFieldsEnclosedInQuotes = true,
                TrimWhiteSpace = false
            })
            {
                try{
                    while(!parser.EndOfData)
                    {
                        invocations.Add(parser.ReadFields()!);
                    }
                }catch(MalformedLineException)
                {
                    logWriter.WriteLine($"Error: Arguments ({parser.ErrorLine}) could not be parsed!");
                    return;
                }
            }

            this.StateHasChanged();

            var env = new WebEnvironment((IJSInProcessRuntime)js, logWriter, inputFiles, outputFiles, this.StateHasChanged);
            webEnvironment = env;

            foreach(var args in invocations)
            {
                if(env.Disposed) break;
                var application = new Application<WebInspector>(env);
                await application.Run(args);
                this.StateHasChanged();
            }
        }catch(Exception e) when(GlobalOptions.SuppressNonCriticalExceptions)
        {
            logWriter.WriteLine("Unexpected error: " + e);
        }finally{
            this.StateHasChanged();
        }
    }
}
