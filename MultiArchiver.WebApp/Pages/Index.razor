@page "/"
@using IS4.MultiArchiver;
@using System.IO;
@using Microsoft.VisualBasic.FileIO;
@inject IJSRuntime js

<h1>MultiArchiver</h1>

<form @onsubmit="OnSubmit">
    <p><textarea @bind="Command" style="resize: both;" rows="4" cols="80" /></p>
    <InputFile OnChange="OnInputFileChange" multiple />
    <button type="submit">Execute</button>
</form>

<ul>
    @foreach(var file in outputFiles)
    {
        <li><a href="@file.Value.CreateBlob()" download="@file.Key">@file.Key</a></li>
    }
</ul>

<pre>
    @foreach(var chunk in outputChunks)
    {
<span>@chunk</span>
    }
</pre>

@code {
    Dictionary<string, IBrowserFile> inputFiles;
    Dictionary<string, BlobArrayStream> outputFiles = new Dictionary<string, BlobArrayStream>();
    string Command { get; set; } = "describe -r urn:uuid: -d -x *-hash:* -h sha256 * output.ttl";
    List<string> outputChunks = new List<string>();

    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        inputFiles = e.GetMultipleFiles().ToDictionary(f => f.Name, f => f, StringComparer.OrdinalIgnoreCase);
    }

    async void OnSubmit()
    {
        outputChunks.Clear();
        var logWriter = new EventWriter();
        logWriter.Written += sb => {
            outputChunks.Add(sb.ToString());
        };
        outputFiles.Clear();

        try{
            var invocations = new List<string[]>();
            using(var parser = new TextFieldParser(new StringReader(Command))
            {
                TextFieldType = FieldType.Delimited,
                CommentTokens = new[] { "#" },
                Delimiters = new[] { " " },
                HasFieldsEnclosedInQuotes = true,
                TrimWhiteSpace = false
            })
            {
                try{
                    while(!parser.EndOfData)
                    {
                        invocations.Add(parser.ReadFields());
                    }
                }catch(MalformedLineException)
                {
                    logWriter.WriteLine($"Error: Arguments ({parser.ErrorLine}) could not be parsed!");
                    return;
                }
            }

            this.StateHasChanged();

            var env = new WebEnvironment((IJSInProcessRuntime)js, logWriter, inputFiles, outputFiles);

            foreach(var args in invocations)
            {
                var application = new Application<WebArchiver>(env);
                await application.Run(args);
                this.StateHasChanged();
            }
        }catch(Exception e) when (GlobalOptions.SuppressNonCriticalExceptions)
        {
            logWriter.WriteLine("Unexpected error: " + e);
        }finally{
            this.StateHasChanged();
        }
    }
}
