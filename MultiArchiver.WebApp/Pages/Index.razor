@page "/"
@using IS4.MultiArchiver;
@inject IJSRuntime js

<h1>MultiArchiver</h1>

<form @onsubmit="OnSubmit">
    <p><textarea @bind="Command"/></p>
    <InputFile OnChange="OnInputFileChange" multiple />
    <button type="submit">Execute</button>
</form>

<ul>
    @foreach(var file in outputFiles)
    {
        <li><a href="@file.Value.CreateBlob()" download="@file.Key">@file.Key</a></li>
    }
</ul>

<pre>
    @foreach(var chunk in outputChunks)
    {
<span>@chunk</span>
    }
</pre>

@code {
    Dictionary<string, IBrowserFile> inputFiles;
    Dictionary<string, BlobArrayStream> outputFiles = new Dictionary<string, BlobArrayStream>();
    string Command { get; set; } = "describe -d -f * -a * -h sha256 * output.ttl";
    List<string> outputChunks = new List<string>();

    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        inputFiles = e.GetMultipleFiles().ToDictionary(f => f.Name, f => f, StringComparer.OrdinalIgnoreCase);
    }

    async void OnSubmit()
    {
        var args = Command.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        outputChunks.Clear();
        var logWriter = new EventWriter();
        logWriter.Written += sb => {
            outputChunks.Add(sb.ToString());
        };
        outputFiles.Clear();

        this.StateHasChanged();

        var env = new WebEnvironment((IJSInProcessRuntime)js, logWriter, inputFiles, outputFiles);

        var application = new Application<WebArchiver>(env);

        await application.Run(args);

        this.StateHasChanged();
    }
}
